import * as tm from "type-mapping";
import {ILog} from "../../log";
import {QueryUtil} from "../../../unified-query";
import * as ExprLib from "../../../expr-library";
import {exists} from "./exists";
import {FetchLatestValueOrDefaultColumn, FetchLatestValueOrDefaultSelectValueDelegate} from "../execution";
import {ColumnMapUtil} from "../../../column-map";
import {ColumnIdentifierMapUtil} from "../../../column-identifier-map";
import {latest} from "./latest";
import {ColumnUtil} from "../../../column";
import {Expr} from "../../../expr";
import {UsedRefUtil} from "../../../used-ref";

export type LatestValue<
    LogT extends ILog,
    ColumnT extends ColumnUtil.FromColumnMap<LogT["logTable"]["columns"]>
> = (
    Expr<{
        mapper : tm.SafeMapper<
            | null
            | ReturnType<ColumnT["mapper"]>
        >,
        usedRef : UsedRefUtil.FromColumnMap<LogT["ownerTable"]["columns"]>,
    }>
);

export function latestValue<
    LogT extends ILog,
    ColumnT extends ColumnUtil.FromColumnMap<LogT["logTable"]["columns"]>
> (
    log : LogT,
    selectValueDelegate : (columns : LogT["logTable"]["columns"]) => ColumnT
) : (
    LatestValue<LogT, ColumnT>
) {
    const column = selectValueDelegate(log.logTable.columns);
    ColumnIdentifierMapUtil.assertHasColumnIdentifier(log.logTable.columns, column);

    /**
     * It is possible for a row to exist but the value is `NULL`.
     * Especially when the column is nullable.
     */
    return ExprLib.if(
        exists(log),
        latest(log)
            .selectValue(() => column as any),
        null
    ) as any;
}
